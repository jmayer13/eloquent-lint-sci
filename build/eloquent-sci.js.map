{"version":3,"sources":["../lib/annotations.js","../lib/index.js"],"names":[],"mappings":";;;;;;kBAkCe,UAAU,IAAV,EAAgB,aAAhB,EAA+B;AAC1C,MAAE,OAAF,CAAU,OAAV,EAAmB,UAAC,MAAD,EAAY;AAC3B,YAAM,OAAO,IAAI,MAAJ,CAAW,OAAO,KAAlB,EAAyB,GAAzB,CAAb;AACA,YAAI,QAAQ,KAAK,IAAL,CAAU,IAAV,CAAZ;AACA,eAAO,SAAS,IAAhB,EAAsB;AAClB,0BAAc,MAAM,KAAN,GAAc,CAA5B,EAA+B,KAAK,SAAL,CAAe,MAAM,KAAN,GAAc,EAA7B,EAAiC,MAAM,KAAN,GAAc,EAA/C,CAA/B,EACI,OAAO,OADX;AAEA,oBAAQ,KAAK,IAAL,CAAU,IAAV,CAAR;AACH;AACJ,KARD;AASH,C;;AA5CD,IAAM,IAAI,QAAQ,QAAR,CAAV;;AAGA,IAAM,UAAU,CACZ;AACI,aAAS,yBADb;AAEI,WAAO;AAFX,CADY,EAKZ;AACI,aAAS,yBADb;AAEI,WAAO;AAFX,CALY,EASZ;AACI,aAAS,yBADb;AAEI,WAAO;AAFX,CATY,EAaZ;AACI,aAAS,yBADb;AAEI,WAAO;AAFX,CAbY,EAiBZ;AACI,aAAS,yBADb;AAEI,WAAO;AAFX,CAjBY,EAqBZ;AACI,aAAS,yBADb;AAEI,WAAO;AAFX,CArBY,EAyBZ;AACI,aAAS,yBADb;AAEI,WAAO;AAFX,CAzBY,CAAhB;;;;;;;;kBCDe,UAAU,IAAV,EAAgB,aAAhB,EAA+B;AAC1C,+BAAY,IAAZ,EAAkB,aAAlB;AACH,C;;AAJD","file":"eloquent-sci.js","sourcesContent":["const _ = require(\"lodash\");\r\n\r\n\r\nconst samples = [\r\n    {\r\n        message: \"annotations left behind\",\r\n        regex: \"FIXME\",\r\n    },\r\n    {\r\n        message: \"annotations left behind\",\r\n        regex: \"FIX ME\",\r\n    },\r\n    {\r\n        message: \"annotations left behind\",\r\n        regex: \"TODO\",\r\n    },\r\n    {\r\n        message: \"annotations left behind\",\r\n        regex: \"todo\",\r\n    },\r\n    {\r\n        message: \"annotations left behind\",\r\n        regex: \"ERASE THIS\",\r\n    },\r\n    {\r\n        message: \"annotations left behind\",\r\n        regex: \"FIX THIS\",\r\n    },\r\n    {\r\n        message: \"annotations left behind\",\r\n        regex: \"FIX LATER\",\r\n    },\r\n];\r\n\r\nexport default function (line, printFunction) {\r\n    _.forEach(samples, (sample) => {\r\n        const patt = new RegExp(sample.regex, \"g\");\r\n        let match = patt.exec(line);\r\n        while (match != null) {\r\n            printFunction(match.index + 1, line.substring(match.index - 10, match.index + 10),\r\n                sample.message);\r\n            match = patt.exec(line);\r\n        }\r\n    });\r\n}\r\n","import annotations from \"./annotations\";\r\n\r\nexport default function (line, printFunction) {\r\n    annotations(line, printFunction);\r\n}\r\n"]}